import os, re
from subprocess import run
from time import sleep

"""
rulesfile.py - UDEV rules file management for ASMDisks
Copyright (c) 2023 - Bart Sjerps <bart@dirty-cache.com>
License: GPLv3+
"""

header = """\
# This file was automatically generated by the /usr/bin/asm program.
#
# It's recommended not to edit this file directly as it will be overwritten
# with each run of the "asm" command.

# force group "disk" for all disks not in asmtab
# to prevent disks having wrong permissions after being deleted from asmtab
GROUP="disk", ENV{DEVTYPE}=="disk", KERNEL=="sd*"
GROUP="disk", ENV{DEVTYPE}=="partition", KERNEL=="sd*"

SUBSYSTEM!="block", GOTO="asmudev_end"

"""

footer = """\
LABEL="asmudev_end"
"""

def getbootdisk():
    """Get the bootdisk - using FS mounted on /boot"""
    with open('/proc/mounts') as f:
        data = f.read()
        r = re.search('^(\S+)\s+/boot\s+.*', data, re.M)
        if r:
            bootdev = r.group(1).split('/')[-1]
            real = os.path.realpath(f'/sys/class/block/{bootdev}')
            if os.path.isfile(os.path.join(real, 'partition')):
                return real.split('/')[-2]
    return None

class RulesFile():
    def __init__(self, db, path):
        self.db = db
        self.path = path

    def save(self):
        metadata = self.db.metadata.get(id=0)
        modestr = f'0{oct(metadata.mode)[2:]}'

        with open(self.path, 'w') as f:
            f.write(header)

            bootdisk = getbootdisk()
            if bootdisk:
                f.write(f'# Don\'t touch the bootdisk\n')
                f.write(f'ENV{{DEVPATH}}=="*/block/{bootdisk}", GOTO="asmudev_end"\n\n')
            else:
                f.write('# No bootdisk\n')

            for vol in self.db.volumes.select('*'):
                volid   = vol.identifier
                volname = vol.volname
                driver  = vol.disktype
                ogm     = f'OWNER="{metadata.user}", GROUP="{metadata.grp}", MODE="{modestr}"'
                symlnk  = f'SYMLINK+="{metadata.diskstring}/{volname}"'
                if driver == 'sd':
                    f.write(f'{ogm}, KERNEL=="sd*", ENV{{DEVTYPE}}=="disk", ENV{{ID_SERIAL}}=="{volid}", {symlnk}\n')
                elif driver == 'device-mapper':
                    f.write(f'{ogm}, ENV{{DM_NAME}}=="{volid}", {symlnk}\n')
                elif driver == 'blkext':
                    f.write(f'{ogm}, ENV{{ID_WWN}}=="{volid}", {symlnk}\n')
                elif driver == 'scini':
                    f.write(f'{ogm}, KERNEL=="scini*", PROGRAM="/opt/emc/scaleio/sdc/bin/drv_cfg --query_block_device_id --block_device /dev/%k", RESULT="{volid}", {symlnk}\n')
                    #KERNEL=="scini*", SUBSYSTEM=="block", PROGRAM="/opt/emc/scaleio/sdc/bin/drv_cfg --query_block_device_id --block_device /dev/%k", RESULT=="23719f5a70163008-fa12df0500000012", SYMLINK+="oracleasm/disk37", OWNER="grid", GROUP="asmadmin", MODE="0660"
            f.write('\n\n')
            f.write(footer)

    def dump(self):
        try:
            with open(self.path) as f:
                data = f.read()
                print(data)
        except FileNotFoundError:
            raise ValueError(f"Rules file does not exist (yet) - {self.path}")
    
    @staticmethod
    def reload():
        run(['/usr/sbin/udevadm', 'control', '--reload-rules'])
        sleep(1)
        run(['/usr/sbin/udevadm', 'trigger'])
